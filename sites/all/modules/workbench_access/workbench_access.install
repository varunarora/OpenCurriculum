<?php

/**
 * @file
 *   Install file for Workbench Access.
 */

/**
 * Implements hook_schema().
 */
function workbench_access_schema() {

  $schema['workbench_access'] = array(
    'description' => 'Defines the active sections for hierarchical access controls.',
    'fields' => array(
      'access_id' => array(
        'description' => 'The section identifier, which may be non-numeric.',
        'type' => 'varchar',
        'length' => '80',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_scheme' => array(
        'description' => 'The module responsbile for this access system.',
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_type' => array(
        'description' => 'The access type (e.g. taxonomy).',
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_type_id' => array(
        'description' => 'The primary key for the access type (e.g. a vocabulary id).',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('access_id', 'access_scheme'),
  );

  $schema['workbench_access_user'] = array(
    'description' => 'Maps user access to sections',
    'fields' => array(
      'uid' => array(
        'description' => 'The user identifier. Foreign key to {users}.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'access_id' => array(
        'description' => 'The section identifier. Foreign key to {workbench_access}.',
        'type' => 'varchar',
        'length' => '80',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_scheme' => array(
        'description' => 'The module responsbile for this access system.',
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('uid', 'access_id', 'access_scheme'),
    'foreign keys' => array(
      'section_id' => array('workbench_access' => array('access_id', 'access_scheme')),
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['workbench_access_role'] = array(
    'description' => 'Maps role access to sections',
    'fields' => array(
      'rid' => array(
        'description' => 'The role identifier. Foreign key to {role}.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'access_id' => array(
        'description' => 'The section identifier. Foreign key to {workbench_access}.',
        'type' => 'varchar',
        'length' => '80',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_scheme' => array(
        'description' => 'The module responsbile for this access system.',
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('rid', 'access_id', 'access_scheme'),
    'foreign keys' => array(
      'section_id' => array('workbench_access' => array('access_id', 'access_scheme')),
      'rid' => array('role' => 'rid'),
    ),
  );

  $schema['workbench_access_node'] = array(
    'description' => 'Maps sections to nodes',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier. Foreign key to {node}.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'access_id' => array(
        'description' => 'The section identifier. Foreign key to {workbench_access}.',
        'type' => 'varchar',
        'length' => '80',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_scheme' => array(
        'description' => 'The module responsbile for this access system.',
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid', 'access_id', 'access_scheme'),
    'foreign keys' => array(
      'section_id' => array('workbench_access' => array('access_id', 'access_scheme')),
      'uid' => array('node' => 'nid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 *
 * Multistep process:
 *  1) Tell the user to configure this module.
 *  2) Create our vocabulary.
 *  3) Create some sample terms.
 *  4) Set the active schema for the site.
 *  5) Set all sections to active.
 *  6) Assign the super-user to the main section.
 *  7) Assign all nodes to the main section.
 */
function workbench_access_install() {
  $vocabulary = new stdClass();
  $vocabulary->name = 'Museum';
  $vocabulary->module = 'workbench_access';
  $vocabulary->machine_name = 'workbench_access';
  $vocabulary->description = 'Access control for editorial content.';
  $vocabulary->hierarchy = 1;
  $vocabulary->weight = -10;
  $existing = taxonomy_get_vocabularies();
  $exists = FALSE;
  // Ensure that this is a unique vocabulary.
  foreach ($existing as $voc) {
    if ($voc->machine_name == $vocabulary->machine_name) {
      $exists = TRUE;
    }
  }
  // If the vocabulary exists, do not create any terms for it.
  if ($exists || !empty($GLOBALS['conf']['workbench_access_install_minimal'])) {
    return;
  }
  // Save.
  taxonomy_vocabulary_save($vocabulary);
  // Create some terms.
  $terms = array(
    'Exhibits',
    'Library',
    'Gift Shop',
  );
  $children = array(
    'Staff',
    'Visitors',
  );
  // Get the proper filter format for taxonomy descriptions.
  $account = new stdClass();
  $account->uid = 0;
  $account->roles = array(DRUPAL_ANONYMOUS_RID);
  $format = filter_default_format($account);
  $ids = array('workbench_access');
  $i = -5;
  foreach ($terms as $name) {
    $term = new stdClass();
    $term->name = $name;
    $term->vocabulary_machine_name = 'workbench_access';
    $term->vid = $vocabulary->vid;
    $term->description = st('Test term for Workbench Access.');
    $term->format = $format;
    $term->weight = $i;
    taxonomy_term_save($term);
    $i = $i +5;
    $ids[] = $term->tid;
    // Create child terms.
    foreach ($children as $child) {
      $item = new stdClass();
      $item->name = $name . ' ' . $child;
      $item->parent = $term->tid;
      $item->vocabulary_machine_name = 'workbench_access';
      $item->vid = $vocabulary->vid;
      $item->format = $format;
      $item->description = t('Test child term for Workbench Access.');
      taxonomy_term_save($item);
      $ids[] = $item->tid;
    }
  }

  // Set our vocabulary as the default.
  $current = variable_get('workbench_access_taxonomy', array());
  if (empty($current)) {
    variable_set('workbench_access_taxonomy', array($vocabulary->machine_name => $vocabulary->machine_name));
  }
  // Set taxonomy as the active scheme.
  variable_set('workbench_access', 'taxonomy');
  // Set up the sections.
  $section = array(
    'access_scheme' => 'taxonomy',
    'access_type' => 'taxonomy',
    'access_type_id' => $vocabulary->machine_name,
  );
  foreach ($ids as $id) {
    $section['access_id'] = $id;
    workbench_access_section_save($section);
  }
  // Give the admin account access to all sections.
  workbench_access_user_section_save(1, 'workbench_access', 'taxonomy');

  // Get all nodes and save them to {workbench_access_node}.
  $nids = db_query("SELECT nid FROM {node}")->fetchAll();
  $values = array();
  foreach ($nids as $nid) {
    $values[] = array(
      'nid' => $nid->nid,
      'access_id' => 'workbench_access',
      'access_scheme' => 'taxonomy',
    );
  }
  if (empty($values)) {
    return;
  }
  $query = db_insert('workbench_access_node')->fields(array('nid', 'access_id', 'access_scheme'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

/**
 * Implements hook_enable().
 *
 * Check the module configuration requirements.
 */
function workbench_access_enable() {
  // If Workbench Access has not been configured, direct the user to configuration.
  if (!variable_get('workbench_access', FALSE)) {
    $message = workbench_access_configuration_needed_message();
    drupal_set_message($message, 'warning', $repeat = FALSE);
  }
}

/**
 * Implements hook_requirements() to check if workbench_access is configured.
 *
 * @param $phase
 */
function workbench_access_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // If this variable has not been set, workbench access is not fully configured.
    if (!variable_get('workbench_access', FALSE)) {
      $severity = REQUIREMENT_ERROR;
      $value = t('Not Configured');
      $description = workbench_access_configuration_needed_message();
    }
    else {
      $severity = REQUIREMENT_OK;
      $value = t('Configured');
      $description = t('Workbench Access is configured properly, using %scheme as the access scheme.', array('%scheme' => variable_get('workbench_access', 'taxonomy')));
    }
    $requirements['workbench_access'] = array(
      'title' => t('Workbench Access'),
      'value' => $value,
      'severity' => $severity,
      'description' => $description,
    );
  }

  return $requirements;
}

/**
 * Remove our vocabulary and variables.
 */
function workbench_access_uninstall() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('workbench_access');
  if (isset($vocabulary->vid)) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }
  variable_del('workbench_access');
  variable_del('workbench_access_taxonomy');
  variable_del('workbench_access_menu');
  variable_del('workbench_access_auto_assign');
}

/**
 * Allow for multiple term selection.
 *
 * NOTE: This update only affects sites on the pre-drupal.org release.
 */
function workbench_access_update_7000() {
  $taxonomy = variable_get('workbench_access_taxonomy', 0);
  if (!is_array($taxonomy)) {
    if (empty($taxonomy)) {
      variable_set('workbench_access_taxonomy', array());
    }
    else {
      variable_set('workbench_access_taxonomy', array($taxonomy));
    }
  }
  return t('Set access rules correctly.');
}

/**
 * Add the role-based storage table.
 *
 * NOTE: This update only affects sites on the pre-drupal.org release.
 */
function workbench_access_update_7001() {
  if (db_table_exists('workbench_access_role')) {
    return t('Update not required.');
  }
  $schema = array(
    'description' => 'Maps role access to sections',
    'fields' => array(
      'rid' => array(
        'description' => 'The role identifier. Foreign key to {role}.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'access_id' => array(
        'description' => 'The section identifier. Foreign key to {workbench_access}.',
        'type' => 'varchar',
        'length' => '80',
        'not null' => TRUE,
        'default' => '',
      ),
      'access_scheme' => array(
        'description' => 'The module responsbile for this access system.',
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('rid', 'access_id', 'access_scheme'),
    'foreign keys' => array(
      'section_id' => array('workbench_access' => array('access_id', 'access_scheme')),
      'rid' => array('role' => 'rid'),
    ),
  );
  db_create_table('workbench_access_role', $schema);
  return t('Added the workbench_access_role table');
}

/**
 * Use vocabulary machine names instead of ids.
 *
 * NOTE: This update only affects sites on the pre-drupal.org release.
 */
function workbench_access_update_7002() {
  if (!module_exists('taxonomy')) {
    return t('No update is required.');
  }
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    db_update('workbench_access')
      ->fields(array('access_type_id' => $vocabulary->machine_name))
      ->condition('access_type_id', $vocabulary->vid)
      ->execute();
  }
}

/**
 * Use vocabulary machine names, part two.
 *
 * NOTE: This update only affects sites on the pre-drupal.org release.
 */
function workbench_access_update_7003() {
  $taxonomy = variable_get('workbench_access_taxonomy', array());
  if (!module_exists('taxonomy')) {
    return t('No update is required.');
  }
  $new = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($taxonomy as $vid) {
    $new[] = $vocabularies[$vid]->machine_name;
  }
  variable_set('workbench_access_taxonomy', $new);
}
